// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RedShift.Infrastructure.EF.Contexts;

#nullable disable

namespace RedShift.Infrastructure.EF.Migrations
{
    [DbContext(typeof(RedShiftReadDbContext))]
    [Migration("20230324094954_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RedShift.Infrastructure.EF.ReadModels.SkyMarkReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkyMarks", (string)null);
                });

            modelBuilder.Entity("RedShift.Infrastructure.EF.ReadModels.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RedShift.Infrastructure.EF.ReadModels.SkyMarkReadModel", b =>
                {
                    b.HasOne("RedShift.Infrastructure.EF.ReadModels.UserReadModel", "User")
                        .WithMany("SkyMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("RedShift.Domain.ValueObjects.Location.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SkyMarkReadModelId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Declination")
                                .HasColumnType("double precision")
                                .HasColumnName("Declination");

                            b1.Property<double>("RightAscension")
                                .HasColumnType("double precision")
                                .HasColumnName("RightAscension");

                            b1.HasKey("SkyMarkReadModelId");

                            b1.ToTable("SkyMarks");

                            b1.WithOwner()
                                .HasForeignKey("SkyMarkReadModelId");
                        });

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RedShift.Infrastructure.EF.ReadModels.UserReadModel", b =>
                {
                    b.Navigation("SkyMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
